K8S Cheatsheet: https://kubernetes.io/docs/reference/kubectl/quick-reference/

#Find short names for Kubernetes resources in kubectl
kubectl api-resources

#Namespaces

#Create a new namespace
kubectl create ns <name>

#List all namespaces in the current cluster
kubectl get ns

#Set the default namespace for the current context.
kubectl config set-context --current --namespace=<namespace>







#Resource Quotas


#Create Resource Quota: To create a resource quota
kubectl create -f resourcequota.yaml -n <namespace>

#Get Resource Quotas: Use the following command to retrieve the resource quotas in a specific namespace:
kubectl get resourcequota -n <namespace> 

#Describe Resource Quota: To get detailed information about a specific resource quota
kubectl describe resourcequota <resourcequota-name> -n <namespace>

#Update Resource Quota: If you need to modify an existing resource quota
kubectl edit resourcequota <resourcequota-name> -n <namespace>

#Delete Resource Quota:
kubectl delete resourcequota <resourcequota-name> -n <namespace>







#Deployments

#Create a new deployment.
kubectl create deployment <name> --image=<image_name>

#List all deployments in the current cluster
kubectl get deployments

#Scale a deployment to the specified number of replicas.
kubectl scale deployment <name> --replicas=<count>

#Update the container image of a deployment.
kubectl set image deployment/<name> <container_name>=<new_image>

#Check the status of a rollout
kubectl rollout status deployment/<name>

#View the history of a deployment rollout.
kubectl rollout history deployment/<name>

#Rollback to the previous deployment version.
kubectl rollout undo deployment/<name>






#pods


#List all pods in the current namespace
kubectl get pods -n <namespace>

#Dump pod logs (stdout)
kubectl logs <pod_name>     

#Stream pod logs (stdout) or Print the logs for a pod and follow new logs
kubectl logs -f <pod_name>   

#Stream pod container logs (stdout, multi-container case)
kubectl logs -f <pod_name> -c my-container              

#Dump pod logs (stdout) for a previous instantiation of a container
kubectl logs <pod_name> --previous       

#Dump pod container logs (stdout, multi-container case) for a previous instantiation of a container
kubectl logs <pod_name> -c my-container --previous      

#Dump pod container logs (stdout, multi-container case)
kubectl logs <pod_name> -c <container_name>    

#View the logs for all containers in a pod
kubectl logs <pod_name> --all-containers

#Dump pod logs, with label name=myLabel (stdout)
kubectl logs -l name=<label_name>                       

#dump pod container logs, with label name=myLabel (stdout)
kubectl logs -l name=<label_name> -c <container_name>
                          
#Stream all pods logs with label name=myLabel (stdout)
kubectl logs -f -l name=myLabel --all-containers    

#Print the logs for the last 6 hours for a pod
kubectl logs --since=6h <pod_name>


#EXEC

#Check health status of the pod
wget -qO- http://localhost:8080/actuator/health


#Services

#Create a new service: Exposes an application running on a set of pods as a network service.
kubectl expose deployment <name> --port=<port> --target-port=<target_port> --type=<type>

#List all services
kubectl get services

#Delete a service.
kubectl delete service <name>




#Ingress


#Create an ingress resource: Exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
kubectl apply -f <ingress_yaml_file>

#List all ingress resources
kubectl get ingress



#Configurations

#Create a ConfigMap
kubectl create configmap <configmap-name> --from-file=<path-to-file>

#List all ConfigMaps
kubectl get configmaps





#Copying files and directories to and from containers

# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the current namespace
kubectl cp /tmp/foo_dir my-pod:/tmp/bar_dir   

# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace my-namespace
kubectl cp /tmp/foo my-namespace/my-pod:/tmp/bar       

# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo my-pod:/tmp/bar -c my-container    

# Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl cp my-namespace/my-pod:/tmp/foo /tmp/bar    
